- Commits com vulnerabilidades
- Erlang e Ruby
- Elixir utiliza processos leves e isolados que são executados em todas as CPUs e dados imutáveis para facilitar a simultaneidade. Esses mesmos processos isolados também permitem escabilidae simples (tanto em adicionar mais máquinas ou em usar os recursos da máquina atual mais eficientemente)
- Processos ajudam a obter confiabilidade, poois podem ser reiniciados rapidamente pelo sistema supervisório caso seja necessário
- Open Telecom Platform (OTP) do Erlang, que é um recurso padrão na biblioteca do Erlang para uso em tolerância de falhas em sistemas de telecomunicações
- Elixir pode ajudar a aliviar problemas que podem vir com a codificação para dispositivos incorporados
- Quão útil Elixir pode ser na criação de software de IoT
- Utilização de uma estrutura de aprendizado de máquina para criar aplicativos de aprendizado de máquina (Elixir + Tensorflow)
- Realizar a verificação estática de tipo para programas Elixir
- Metodologia: mineração dos repositórios OSS Elixir e uso de codificação fechada para identificar commits relacionados a vulnerabilidades que estão relacionados a vulnerabilidades
- Repositórios OSS Elixir hospedados no GitHub (1 - utilitário de pesquisa do GitHub para filtrar repositórios cuja linguagem de programação principal é o Elixir - 31.624 respositórios / 2 - contagem de estrelas para identificar os 25 principais repositórios populares na comunidade de código aberto de Elixir - 4.446 commits)
- Aplicaram uma análise qualitativa, técnica chamada de codificação fechada, onde um avaliador inspeciona trechos de texto e mapeia o conjunto de trechos de texto para uma categora pré-definida
- Aplicaram uma codificação fechada com dois avaliadores bem versados em segurança de software para conduzir o processo de codificação fechada
- O primeiro avaliador é o primeiro autor, com dois anos de experiência acadêmica em segurança cibernética e um ano de experiência profissional em segurança cibernética e um ano de experiência profissional em engenharia de software
- O segundo avaliador não é autor, mas participou voluntariamente. Ele é um estudante de graduação do departamento com um ano de experiência profissional em segurança cibernética
- Ambos determinam individualmente se cada um dos commits coletados são relacionados à segurança, realizandos as seguintes atividases: 1 - O avaliador observa se algumas das palavras-chaves (‘race’,
‘racy’, ‘buffer’, ‘overflow’, ‘stack’, ‘integer’, ‘signedness’, ‘widthness’,
‘underflow’, ‘improper’, ‘unauthenticated’, ‘gain access’, ‘permission’,
‘cross site’, ‘css’, ‘xss’, ‘htmlspecialchar’, ‘denial service’, ‘dos’,
‘crash’, ‘deadlock’, ‘sql’, ‘sqli’, ‘injection’, ‘format’, ‘string’, ‘printf’,
‘scanf’, ‘request forgery’, ‘csrf’, ‘xsrf’, ‘forged’, ‘security’, ‘vulnerability’,
‘vulnerable’, ‘hole’, ‘exploit’, ‘attack’, ‘bypass’, ‘backdoor’,
‘threat’, ‘expose’, ‘breach’, ‘violate’, ‘fatal’, ‘blacklist’, ‘overrun’, and
‘insecure’) aparecem em cada uma das mensagens de commit coletadas; 2 - O avaliador determina que um commit possui um defeito relacionado à segurança se a mensagem indica que uma ação foi tomada para resolver um problema de segurança do software de interesse.O avaliador determina se uma mensagem de commit estará relacionada a uma vulnerabilidae se algum dos seguintes objetos de segurança for violado: confidencialidade, integridade ou disponibilidade. Aplicaram essa etapa porque confiar apenas na pesquisa por palavra-chave pode gerar falsos positivos; 3 - Calcularam a concordância do avaliador usando o Kappa de Cohen (uma estatística usada para medir a confiabilidade interxaminador (e também a confiabilidade intraexaminador) para itens qualitativos. É considerada uma medida mais robusta do que o cálculo percentual de concordância, pois k leva em consideração a possibilidade de a concordância ocorrer por acaso. Há uma controvérsia no Kappa devido à dificuldade em interpretar os índices de concordância. Alguns pesquisadores sugeriram que é conceitualmente mais simples avaliar a discordância entre os itens.)
- Após as fases, obteram um conjunto de dados com cada commit relacionado à vulnerabilidade ou não (se o commit estiver relacionado a uma vulnerabilidade, ele será rotulado como "VULNERÁVEL", caso contrário, como "NEUTRO")
- Limitações: o conjunto de dados derivado é restrito pelo viés do avaliador (mitigado pelo uso de dois avaliadores), o conjunto de dados é coletado dos repositórios OSS do GitHub, que é limitante e não pode ser generalizado para conjuntos de dados proprietários
-  Resultados: a codificação fechada durou 121 e 186 horas, respectivamente, para o primeiro e o segundo autores, o Kappa de Cohen entre o primeiro e o segundo autor foi de 0,88, o que é "quase perfeito", houveram divergências em 101 mensagens de commit na conclusão do processo de codificação fechada, o último autor atuou como resolvedor de divergências
- Encontraram 90 commits a serem rotulados como "VULNERÁVEIS", enquanto 4.356 commits a serem rotulados como "NEUTROS". A proporção de commits relacionados à vulnerabilidade é de 2,0%, foram observados 319 programas Elixir modificados nos 90 commits relacionados a vulnerabilidades, 9 dos 25 respositórios Elixir OSS incluem um commit relacionado à vulnerabilidade
- Conclusão: a alta utilização de Elixir exige que seus programas estejam livres de vulnerabilidades para que usuários mal-intencionados não possam explorar os programas desenvolvidos. Um estudo empírico pode fornecer uma compreesnsão de quão frequentemente as vulnerabilidades são introduzidas em programas Elixir. Ao aplicar a codificação fechada com 4.446 commits extraídos de 25 repositórios Elixir OSS, quantificaram a frequência de commits relacionados a vulnerabilidades para programas Elixir. Observaram 2,0% dos 4.446 commits estão relacionados à vulnerabilidade. Com base em suas descobertas, recomendam que os profissionais adotem a política de mudança para a esquerda, aplicando análises estáticas nos programas Elixir e recomendam que os pesquisadores investiguem sistematicamente razões pelas quais as vulnerabilidades são introduzidas nos programas Elixir
- O artigo estabelece as bases para uma visão de um ecossistema Elixir, onde os os desenvolvedores mitigarão proativamente as vulnerabilidades com a aplicação de ferramentas de análise estática de segurança